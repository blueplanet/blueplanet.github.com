<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Emacs | 蒼い惑星の記録]]></title>
  <link href="http://blueplanet.github.com/blog/categories/emacs/atom.xml" rel="self"/>
  <link href="http://blueplanet.github.com/"/>
  <updated>2013-01-06T17:17:19+09:00</updated>
  <id>http://blueplanet.github.com/</id>
  <author>
    <name><![CDATA[blueplanet]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Emacs init.elを整理]]></title>
    <link href="http://blueplanet.github.com/blog/2012/05/06/emacs-initel/"/>
    <updated>2012-05-06T00:00:00+09:00</updated>
    <id>http://blueplanet.github.com/blog/2012/05/06/emacs-initel</id>
    <content type="html"><![CDATA[<p>最初からいろいろなコードを勝手に入れていましたが、よく整理してなくてバラバラだったので、整理してみる</p>

<p>順番も大事らしいので、順番どおり書く</p>

<ol>
<li>load-pathを追加する関数を定義</li>
<li>表示関連設定

<ul>
<li>color-theme</li>
<li>font</li>
<li>スクロールバー・行列番号表示・ファイルサイズ表示・タイトルバーにファイル名表示</li>
</ul>
</li>
<li>デフォルト動き変更

<ul>
<li>iswatch</li>
<li>OSのコピベとyarkを共通化</li>
<li>インデントにタブを使わない</li>
<li>バックアップ・自動保存ファイル場所を一時フォルダに</li>
<li>キー定義

<ul>
<li><code>C-t</code>で<code>switch-to-buffer</code></li>
<li><code>C-o</code>で<code>find-file</code></li>
<li><code>C-h</code>で<code>backward-delete-char</code></li>
</ul>
</li>
</ul>
</li>
<li>各モード設定

<ul>
<li>Markdown-mode</li>
<li>cua-mode</li>
<li>TODO : rinari (整理してから動かないので、後でやり直す)</li>
<li>Ruby-mode</li>
<li>RSpec-mode</li>
</ul>
</li>
<li>自動補完

<ul>
<li>auto-complete</li>
<li>yasnippet</li>
</ul>
</li>
<li>文字コード関連

<ul>
<li>デフォルト環境を日本語に</li>
<li>設定ファイルをutf-8に</li>
<li>OSによるファイル名称・エンコーディング設定</li>
</ul>
</li>
<li>パッケージ管理

<ul>
<li>ELPA</li>
<li>auto-install</li>
</ul>
</li>
</ol>


<p>以上</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Rinariを導入して見る]]></title>
    <link href="http://blueplanet.github.com/blog/2012/05/01/emacs-rinari/"/>
    <updated>2012-05-01T00:00:00+09:00</updated>
    <id>http://blueplanet.github.com/blog/2012/05/01/emacs-rinari</id>
    <content type="html"><![CDATA[<p>Railsを勉強中。やはりEmcsで編集したいので、<code>Rinari</code>を導入してみる</p>

<h2>ELPAの試しと失敗</h2>

<ul>
<li>ELPAからのインストールがおすすめらいいので、まずはELPAを導入</li>
<li><code>auto-install</code>を使って<code>ELPA</code>をインストール(ややこしいな)</li>
<li>今までは、起動が遅くなる為、<code>auto-install-update-emacswiki-package-name</code>をコメントアウトしてるので、まずは復活する</li>
<li><code>auto-install-update-emacswiki-package-name</code>を実行</li>
<li><code>M-x install-elisep</code>でインストールを起動</li>
<li>URLが聞かれるが、なんか<code>[http://bit.ly/pkg-el23](http://bit.ly/pkg-el23)</code>は<code>reject</code>されるので、直接に展開後の長いURLを入力して実行した</li>
<li><p><code>init.el</code>に必要な設定を追加</p>

<p>  ;; package.el
  (when (require 'package nil t)</p>

<pre><code>(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("ELPA" . "http://tromey.com/elpa/"))
(package-initialize))
</code></pre></li>
</ul>


<h3>Rinariをインストール</h3>

<ul>
<li>ELPAは初回実行なので、<code>list-package</code>を実行する</li>
<li><code>Cannot open load file: ruby-compilatio</code>エラーで落ちた</li>
<li>原因はよく分からないので、とりあえずはやめた</li>
</ul>


<h2>直接インストール</h2>

<ul>
<li>基本は、<a href="http://rinari.rubyforge.org/Basic-Setup.html#Basic-Setup">Basic-Setup</a>を参照する</li>
<li><code>submodule</code>を利用するので、

<ul>
<li><code>git submodule add git://github.com/eschulte/rinari.git .emacs.d/elisp/rinari</code>を実行</li>
</ul>
</li>
<li><code>rhtml-mode</code>は<code>rinari</code>のものを使う

<ul>
<li><code>git submodule add https://github.com/eschulte/rhtml.git .emacs.d/elisp/rhtml</code></li>
</ul>
</li>
</ul>


<hr />

<p>これで、ビューファイルを開くと、<code>rhtml-mode</code>になって、<code>rinari</code>も有効になるはず</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cua-modeを導入してみる]]></title>
    <link href="http://blueplanet.github.com/blog/2012/04/30/cua-mode/"/>
    <updated>2012-04-30T00:00:00+09:00</updated>
    <id>http://blueplanet.github.com/blog/2012/04/30/cua-mode</id>
    <content type="html"><![CDATA[<p>Emacsで矩形選択、複数行の同時編集は、<code>cua-mode</code>が便利そうなので、導入してみる</p>

<h2>設定</h2>

<ul>
<li><code>init.el</code>に<code>(cua-mode t)</code>を追加</li>
<li>キーの設定を禁止する為、<code>(setq cua-enable-cua-keys nil)</code>も追加</li>
</ul>


<h2>使い方</h2>

<ul>
<li><code>c-RET</code>で選択開始位置を設定し、<code>c-n / c-p</code>で選択したい行に移動して選択する

<ul>
<li>この状態のまま入力すると、選択されている行に対して編集が適用される</li>
</ul>
</li>
<li>他にも、連番の追加などがあるらしいですが、下記のリンクで紹介されている</li>
</ul>


<p><a href="http://d.hatena.ne.jp/peccu/20100202/1265088619">cua-mode</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs daemonモード試してみる]]></title>
    <link href="http://blueplanet.github.com/blog/2012/04/29/emacs-daemon/"/>
    <updated>2012-04-29T00:00:00+09:00</updated>
    <id>http://blueplanet.github.com/blog/2012/04/29/emacs-daemon</id>
    <content type="html"><![CDATA[<p>Lionで<code>Emacs</code>を使って、一番悩んでるのは、コマンドラインからファイルを編集するケース。前から<code>daemon</code>モードが知っていますが、何か<code>emacs --daemon</code>で起動すると、エラーが出て起動出来ない状態だった。</p>

<p>今日冷静に考えてみたら、GUI関連の設定とフォント設定の周りのせいじゃないかと気付きました。</p>

<p>確認したら、やはりフォントの設定は条件なしでやっているのは悪かった。それを<code>window-system</code>の場合のみ設定するように修正すれば、<code>daemon</code>オプションを付けても実行出来た！！</p>

<p>これで、Emacsには文句なしですね。</p>

<p>Daemonの設定方法について、公式のWikiに書かれています。</p>

<p><a href="http://www.emacswiki.org/emacs/EmacsAsDaemon">Emacs As Daemon</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EmacsにYasnippet導入]]></title>
    <link href="http://blueplanet.github.com/blog/2012/04/22/emacs-yasnippet/"/>
    <updated>2012-04-22T00:00:00+09:00</updated>
    <id>http://blueplanet.github.com/blog/2012/04/22/emacs-yasnippet</id>
    <content type="html"><![CDATA[<p>角谷さんのビデオでもYasnippetを使っていたらしいし、スニペットの展開が結構使われいるので、導入してみた</p>

<p>もともとGoogle codeで管理していたのですが、今の時点では、既にgithubに移行したので、インストールは基本 <a href="https://github.com/capitaomorte/yasnippet">README</a>を参照すればOK。</p>

<h2>インストール</h2>

<ul>
<li><code>mkdir ~/.emacs.d/plugins</code></li>
<li><code>cd ~/.emacs.d/plugins</code></li>
<li><code>.emacs.d</code>は既にgitで管理しているので、submoduleとして追加する
<code>git submodule add https://github.com/capitaomorte/yasnippet .emacs.d/plugins/yasnippet</code></li>
<li>設定ファイルに追加
<code>require 'yasnippet)</code>
<code>(yas/global-mode t)</code></li>
</ul>


<p>これでOK。</p>

<p>試しに、<code>Ruby-mode</code>で<code>mm</code>入力し<code>TAB</code>キーを入力すると、<code>method_missing</code>メソッドが展開された！！！</p>

<h2>RSpec スニペット</h2>

<p>有志によりYASnippetの日本語ドキュメントがあるので、それ参照して、自分のスニペットを作れます</p>

<p><a href="http://yasnippet-doc-jp.googlecode.com/svn/trunk/doc-jp/index.html">Yet Another Snippet extension 日本語訳</a></p>

<p>らしいですが、ファイルを作って、<code>yas</code>ロードパスに追加しても、まだ展開出来ていません。後でまた調べる</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails, | 蒼い惑星の記録]]></title>
  <link href="http://blueplanet.github.com/blog/categories/rails-/atom.xml" rel="self"/>
  <link href="http://blueplanet.github.com/"/>
  <updated>2013-01-06T21:27:56+09:00</updated>
  <id>http://blueplanet.github.com/</id>
  <author>
    <name><![CDATA[blueplanet]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用 RSpec+Capybara 简单BDD入门 -11]]></title>
    <link href="http://blueplanet.github.com/blog/2013/01/06/ruby-china-clone-11/"/>
    <updated>2013-01-06T21:09:00+09:00</updated>
    <id>http://blueplanet.github.com/blog/2013/01/06/ruby-china-clone-11</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013/01/06/ruby-china-clone-cover">目录</a>
上一步：<a href="/blog/2013/01/06/ruby-china-clone-10">使用 RSpec+Capybara 简单BDD入门 -10</a></p>

<h2>用户故事</h2>

<p>用户希望对帖子进行回复</p>

<h2>环境准备</h2>

<p><code>bash
git checkout -b f11
rails c # console
rails s # server
</code></p>

<h2>步骤</h2>

<h3>编辑<code>spec/features/guest_can_see_topic_info_spec.rb</code>，增加回复form的验证部分</h3>

<p>```rb
  scenario '应该显示回复用的form' do</p>

<pre><code>visit "/topics/#{@topic.id}"

page.should have_field 'reply_content'
page.should have_button '提交回复'
</code></pre>

<p>  end
```</p>

<ul>
<li>测试失败：<code>expected to find field "replay_content" but there were no matches</code></li>
<li>原因：没有实现的代码</li>
</ul>


<h3>编辑<code>topics/show.html.haml</code></h3>

<p>拷贝<code>ui/topic.html</code>中回复form的部分至当前模板</p>

<p>```rb
  %section#reply.box</p>

<pre><code>%form(action="" method="post")
  %textarea(rows="4")
  %input(type="submit" class="btn btn-primary" value="提交回复")
</code></pre>

<p>```</p>

<p>修改为</p>

<p>```rb
  %section#reply.box</p>

<pre><code>= form_for [@topic, Reply.new] do |f|
  = f.text_area :content, rows: 4
  = f.submit "提交回复", class: "btn btn-primary"
</code></pre>

<p>```</p>

<ul>
<li>测试失败：`undefined methodtopic_replies_path' for #&lt;#&lt;Class:0x007fc0f8``</li>
<li>原因：没有设置路由信息</li>
</ul>


<h3>编辑<code>config/routes.rb</code>，增加嵌套的replay的路由设置</h3>

<p>```rb
  resources :topics, only: [:index, :show, :new, :create] do</p>

<pre><code>resources :replies, only: [:create]
</code></pre>

<p>  end
```</p>

<ul>
<li>测试通过！</li>
</ul>


<h3>增加提交回复的测试用例</h3>

<p>```
  scenario '输入回复内容点击"提交回复"后，正常提交回复' do</p>

<pre><code>visit "/topics/#{@topic.id}"

fill_in 'reply_content', with: "回复测试"
click_button "提交回复"

current_path.should == topic_path(@topic)
page.should have_content "回复测试"
</code></pre>

<p>  end
```</p>

<ul>
<li>测试失败：<code>uninitialized constant RepliesController</code></li>
<li>原因：没有<code>replies</code>这个<code>controller</code></li>
</ul>


<h3>在<code>rails console</code>中执行</h3>

<p>```rb
[34] pry(main)> generate "controller replies"</p>

<pre><code>  create  app/controllers/replies_controller.rb
  invoke  haml
  create    app/views/replies
</code></pre>

<p>=> "Completed"
[35] pry(main)>
```</p>

<ul>
<li>测试失败：<code>The action 'create' could not be found for RepliesController</code></li>
<li>原因：没有<code>create</code>方法</li>
</ul>


<h3>编辑<code>controllers/replies_controller.rb</code>，增加<code>create</code>方法</h3>

<p><code>rb
  def create
  end
</code></p>

<ul>
<li>测试失败：<code>Missing template replies/create, application/create with {:local...</code></li>
<li>原因：没有<code>replies/create</code>模板</li>
</ul>


<h3>编辑<code>controllers/replies_controller.rb</code>，增加实际逻辑</h3>

<p>```rb
class RepliesController &lt; ApplicationController
  def create</p>

<pre><code>topic = Topic.find(params[:topic_id])
reply = topic.replies.build params[:reply]
reply.user = current_user
reply.save

redirect_to topic
</code></pre>

<p>  end
end
```</p>

<ul>
<li>测试通过！</li>
</ul>


<h2>完成，提交代码</h2>

<p><code>rb
git add .
git commit
git checkout dev
git merge f11 --no-ff
git branch -d f11
</code></p>

<p><strong>!!全部完成!!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 RSpec+Capybara 简单BDD入门 -10]]></title>
    <link href="http://blueplanet.github.com/blog/2013/01/06/ruby-china-clone-10/"/>
    <updated>2013-01-06T21:07:00+09:00</updated>
    <id>http://blueplanet.github.com/blog/2013/01/06/ruby-china-clone-10</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013/01/06/ruby-china-clone-cover">目录</a>
上一步：<a href="/blog/2013/01/06/ruby-china-clone-9">使用 RSpec+Capybara 简单BDD入门 -9</a></p>

<h2>用户故事</h2>

<p>用户希望看到最新回复的信息</p>

<p>帖子列表页面上显示最新回复的信息</p>

<ul>
<li>回复人</li>
<li>回复日期</li>
</ul>


<p>补充：
- 实际的目的是把回复和用户关联起来</p>

<h2>环境准备</h2>

<p><code>bash
git checkout -b f10
rails c # console
rails s # server
</code></p>

<h2>步骤</h2>

<h3>编辑<code>spec/features/topics_spec.rb</code>，增加最新回复的验证部分</h3>

<p>```rb</p>

<pre><code>scenario '应该显示帖子的最新回复的信息' do
  page.should have_content "last replied by #{@user.name} less than a minute ago"
end
</code></pre>

<p>```</p>

<ul>
<li>测试失败：<code>expected there to be text "last replied by test_user less than a minute ago" i...</code></li>
<li>原因：还没有实现具体的代码</li>
</ul>


<h3>编辑<code>topics/_topics.html.haml</code></h3>

<p>拷贝<code>ui/topics.html</code>中最新回复的部分至当前模板</p>

<p>```rb</p>

<pre><code>      %span= "  •  "
      last replied by
      = link_to "knwang", nil, class: "user_link"
      4 mintes ago
</code></pre>

<p>```</p>

<p>修改为</p>

<p>```rb</p>

<pre><code>      - last_replay = topic.replies.last
      - if last_replay
        %span= "  •  "
        last replied by
        = link_to last_replay.user.name, last_replay.user, class: "user_link"
        = "#{time_ago_in_words(last_replay.created_at)} ago"
</code></pre>

<p>```</p>

<p>在测试用例的<code>background</code>部分加入<code>replay</code>的数据</p>

<p>```rb</p>

<pre><code>Topic.last.replies.create content: 'test replay', user: @user
</code></pre>

<p>```</p>

<ul>
<li>测试失败：<code>Can't mass-assign protected attributes: user</code></li>
<li>原因：没有设置<code>user</code>的访问属性</li>
</ul>


<h3>编辑<code>models/reply.rb</code>，增加用户关联并设置访问属性</h3>

<p>```rb
class Reply &lt; ActiveRecord::Base
  attr_accessible :content, :topic, :user</p>

<p>  belongs_to :topic
  belongs_to :user
end
```</p>

<h3>在<code>rails console</code>中执行</h3>

<p>```rb
[32] pry(main)> generate "migration AddUserIdToReplies user_id:integer"</p>

<pre><code>  invoke  active_record
  create    db/migrate/20130103120615_add_user_id_to_replies.rb
</code></pre>

<p>=> "Completed"
[33] pry(main)>
```</p>

<h3>执行数据库升级</h3>

<p><code>bash
bundle exec rake db:migrate
bundle exec rake db:test:prepare
</code></p>

<ul>
<li>测试通过！</li>
</ul>


<h2>完成，提交代码</h2>

<p><code>bash
git add .
git commit
git checkout dev
git merge f10 --no-ff
git branch -d f10
</code></p>

<p>下一步骤：<a href="/blog/2013/01/06/ruby-china-clone-11">使用 RSpec+Capybara 简单BDD入门 -11</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 RSpec+Capybara 简单BDD入门 -9]]></title>
    <link href="http://blueplanet.github.com/blog/2013/01/06/ruby-china-clone-9/"/>
    <updated>2013-01-06T21:04:00+09:00</updated>
    <id>http://blueplanet.github.com/blog/2013/01/06/ruby-china-clone-9</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013/01/06/ruby-china-clone-cover">目录</a>
上一步：<a href="/blog/2013/01/06/ruby-china-clone-8">使用 RSpec+Capybara 简单BDD入门 -8</a></p>

<h2>用户故事</h2>

<p>用户希望看到帖子的回复列表</p>

<ul>
<li>显示帖子的回复数量</li>
<li>显示回复的下列信息

<ul>
<li>回复日期时间</li>
<li>回复内容</li>
</ul>
</li>
</ul>


<h2>环境准备</h2>

<p><code>bash
git checkout -b f9
rails c # console
rails s # server
</code></p>

<h2>步骤</h2>

<h3>编辑<code>spec/features/guest_can_see_topic_info_spec.rb</code>，增加回复部分的验证</h3>

<p>```rb
  scenario '应该显示帖子的回复信息' do</p>

<pre><code>visit "/topics/#{@topic.id}"

page.should have_content "共收到 5 条回复"
</code></pre>

<p>  end
```</p>

<ul>
<li>测试失败：<code>expected there to be text "共收到 5 条回复" in "社区 会员...</code></li>
<li>原因：还没有实现代码</li>
</ul>


<h3>编辑<code>topics/show.html.haml</code></h3>

<p>拷贝<code>ui/topic.html.haml</code>的回复部分到当前模板</p>

<p>```rb
  %section#topic_content.box</p>

<pre><code>%p= @topic.content
</code></pre>

<p>  %section#replies_banner.box.info-box</p>

<pre><code>%span 共收到 5 条回复
</code></pre>

<p>  %section#replies.box</p>

<pre><code>%ul
  %li
    %a.span1(href="")
      %img(src="#{gravatar_url('joe@example.com')}")
    %article.span8
      = link_to "knwang", nil, class: "user_link"
      %span two hours ago
      %p ++ -- 这个操作就是罪恶的源泉。。++ -- 这个操作就是罪恶的源泉。。++ -- 这个操作就是罪恶的源泉。。++ -- 这个操作就是罪恶的源泉。。++ -- 这个操作就是罪恶的源泉。。++ -- 这个操作就是罪恶的源泉。。
  %li
    %a.span1(href="")
      %img(src="#{gravatar_url('joe@example.com')}")
    %article.span8
      = link_to "knwang", nil, class: "user_link"
      %span two hours ago
      %p ++ -- 这个操作就是罪恶的源泉。。
  %li
    %a.span1(href="")
      %img(src="#{gravatar_url('joe@example.com')}")
    %article.span8
      = link_to "knwang", nil, class: "user_link"
      %span two hours ago
      %p ++ -- 这个操作就是罪恶的源泉。。
</code></pre>

<p>%section#sidebar
  %section#new_topic.box
```</p>

<p>并修改为</p>

<p>```rb
  %section#topic_content.box</p>

<pre><code>%p= @topic.content
</code></pre>

<p>  %section#replies_banner.box.info-box</p>

<pre><code>%span= "共收到 #{@topic.replies.count} 条回复"
</code></pre>

<p>  %section#replies.box</p>

<pre><code>%ul
  - @topic.replies.each do |reply|
    %li
      %a.span1(href="")
        %img(src="#{gravatar_url('joe@example.com')}")
      %article.span8
        = link_to "knwang", nil, class: "user_link"
        %span= "#{time_ago_in_words(reply.created_at)} ago"
        %p= reply.content 
</code></pre>

<p>%section#sidebar
  %section#new_topic.box
```</p>

<p><strong>注意：回复的<code>user</code>暂时先不考虑</strong></p>

<ul>
<li>测试失败：`undefined methodreplies' for #Topic:0x007fc0f5c4b3b0...``</li>
<li>原因：没有<code>replies</code>定义</li>
</ul>


<h3>编辑<code>models/topic.rb</code>，增加关联定义</h3>

<p><code>rb
  has_many :replies
</code></p>

<ul>
<li>测试失败：<code>uninitialized constant Topic::Reply</code></li>
<li>原因：没有<code>Reply</code>这个<code>model</code>的定义</li>
</ul>


<h3>在<code>rails console</code>中执行</h3>

<p>```rb
[26] pry(main)> generate "model reply content:text topic_id:integer"</p>

<pre><code>  invoke  active_record
  create    db/migrate/20130103064335_create_replies.rb
  create    app/models/reply.rb
</code></pre>

<p>=> "Completed"
[27] pry(main)>
```</p>

<h3>执行数据库升级</h3>

<p><code>bash
bundle exec rake db:migrate
bundle exec rake db:test:prepare
</code></p>

<h3>修改spec文件</h3>

<p>```rb</p>

<h1>coding: utf-8</h1>

<p>feature '访问者希望看到帖子的详细信息' do
  background do</p>

<pre><code>@node = Node.create name: "Ruby"
@topic = Topic.create title: "topic 1 test", content: "topic 1 content",  node: @node

5.times.map.with_index { |i| Reply.create content: "reply #{i}", topic: @topic, user: user }
</code></pre>

<p>  end</p>

<p>  scenario '应该显示帖子的详细信息' do
......
  end</p>

<p>  scenario '应该显示帖子的回复信息' do</p>

<pre><code>visit "/topics/#{@topic.id}"

page.should have_content "共收到 #{@topic.replies.count} 条回复"

@topic.replies.each do |reply|
  page.should have_content reply.content
end
</code></pre>

<p>  end
end
```</p>

<ul>
<li>测试失败：<code>Can't mass-assign protected attributes: topic, user</code></li>
<li>原因：没有设置<code>topic,user</code>的访问属性</li>
</ul>


<h3>编辑<code>models/reply.rb</code>，增加访问属性并设置topic和user的关联</h3>

<p>```rb
class Reply &lt; ActiveRecord::Base
  attr_accessible :content, :topic</p>

<p>  belongs_to :topic
end
```</p>

<ul>
<li>测试通过！</li>
</ul>


<h2>完成，提交代码</h2>

<p><code>bash
git add .
git commit
git checkout dev
git merge f9 --no-ff
git branch -d f9
</code></p>

<p>下一步骤：<a href="/blog/2013/01/06/ruby-china-clone-10">使用 RSpec+Capybara 简单BDD入门 -10</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 RSpec+Capybara 简单BDD入门 -8]]></title>
    <link href="http://blueplanet.github.com/blog/2013/01/06/ruby-china-clone-8/"/>
    <updated>2013-01-06T21:04:00+09:00</updated>
    <id>http://blueplanet.github.com/blog/2013/01/06/ruby-china-clone-8</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013/01/06/ruby-china-clone-cover">目录</a>
上一步：<a href="/blog/2013/01/06/ruby-china-clone-7">使用 RSpec+Capybara 简单BDD入门 -7</a></p>

<h2>用户故事</h2>

<p>用户希望公开帖子</p>

<p>输入下列项目
- 节点
- 标题
- 内容
点击保存按钮后，显示帖子列表</p>

<ul>
<li>帖子列表显示帖子创建者信息</li>
<li>在用户信息页面显示最新公开的帖子列表</li>
</ul>


<h2>环境准备</h2>

<p><code>bash
git checkout -b f8
rails c # console
rails s # server
</code></p>

<h2>步骤</h2>

<h3>新建文件<code>spec/features/user_can_publish_topic_spec.rb</code></h3>

<p>```rb</p>

<h1>coding: utf-8</h1>

<p>feature '用户希望公开帖子' do
  background do</p>

<pre><code>@user = User.create name: 'test_user'
</code></pre>

<p>  end</p>

<p>  before do</p>

<pre><code>visit '/sign_in'

fill_in 'user_name', with: @user.name
click_button "登录"
</code></pre>

<p>  end</p>

<p>  scenario '访问/topics/new，应该显示新建帖子页面' do</p>

<pre><code>click_link "发布新帖"

current_path.should == new_topic_path
page.should have_content "新建帖子"
</code></pre>

<p>  end
end
```</p>

<ul>
<li>测试失败：`undefined local variable or methodnew_topic_path' for #&lt;RSpec:...``</li>
<li>原因：没有<code>new_topic</code>的路由信息</li>
</ul>


<h3>编辑<code>config/routes.rb</code>，增加路由信息</h3>

<p><code>rb
  resources :topics, only: [:index, :show, :new]
</code></p>

<ul>
<li>测试失败：<code>expected there to be text "新建帖子" in "社区 会员...</code></li>
<li>原因：“新建帖子”的链接还没有加上</li>
</ul>


<h3>编辑<code>topics/index.html.haml</code></h3>

<p>修改第10行，增加链接</p>

<p>```rb</p>

<pre><code>= link_to "发布新帖", new_topic_path, class: "btn btn-success"
</code></pre>

<p>```</p>

<ul>
<li>测试失败：<code>The action 'new' could not be found for TopicsController</code></li>
<li>原因：没有定义<code>new</code>方法</li>
</ul>


<h3>编辑<code>controllers/topics_controller.rb</code>，增加<code>new</code>方法</h3>

<p><code>rb
  def new
  end
</code></p>

<ul>
<li>测试失败：<code>Missing template topics/new, application/new with {:locale=&gt;...</code></li>
<li>原因：没有<code>topics/new</code>模板</li>
</ul>


<h3>新建<code>topics/new.html.haml</code>模板</h3>

<p>拷贝<code>ui/new_topic.html</code>内容至当前文件</p>

<ul>
<li>测试通过！</li>
</ul>


<h2>确认用户故事，增加<code>spec</code></h2>

<p>```rb</p>

<h1>coding: utf-8</h1>

<p>feature '用户希望公开帖子' do
  background do</p>

<pre><code>@user = User.create name: 'test_user'

Node.create name: "Ruby"
Node.create name: "Rails"
Node.create name: "XiaCheDan"
</code></pre>

<p>  end</p>

<p>  before do</p>

<pre><code>visit '/sign_in'

fill_in 'user_name', with: @user.name
click_button "登录"
</code></pre>

<p>  end</p>

<p>  scenario '访问/topics/new，应该显示新建帖子页面' do</p>

<pre><code>click_link "发布新帖"

page.should have_content "新建帖子"
page.should have_select "topic_node", options: Node.all.map { |node| node.name }
page.should have_field 'topic_title'
page.should have_field 'topic_content'
</code></pre>

<p>  end
end
```</p>

<ul>
<li>测试失败：<code>expected to find select box "topic_node" but there wer...</code></li>
<li>原因：模板还是写死的数据</li>
</ul>


<h3>编辑<code>topics/new.html.haml</code></h3>

<p>```rb
= render 'shared/breadcrumb', links: [["Home", ""], ["社区", ""], ["发帖", ""]]</p>

<p>%section#new_topic.box
  %h1 新建帖子
  = form_for @topic, html: {class: "form-horizontal"} do |f|</p>

<pre><code>.control-group
  = f.label "标题", class: "control-label"
  .controls
    = f.select :node_id, Node.all.map{ |node| [node.name, node.id] }
    %select
      %option(value="Ruby") Ruby
      %option(value="Rails") Rails
      %option(value="XiaCheDan") XiaCheDan
    = f.text_field :title
.control-group
  = f.label "正文"
  .controls
    = f.text_area :content, rows: 20
.submit-button
  = f.submit "保存", class: "btn btn-primary"
  = link_to "取消"
</code></pre>

<p>%section#sidebar
  %section#new_post_note.box</p>

<pre><code>%h2 发帖说明
%p 没啥可说的，发就是了
</code></pre>

<p>```</p>

<ul>
<li>测试失败：`undefined methodmodel_name' for NilClass:Class``</li>
<li>原因：没有对<code>@topic</code>变量赋值</li>
</ul>


<h3>编辑<code>controllers/topics_controller.rb</code></h3>

<p>```rb
  def new</p>

<pre><code>@topic = Topic.new
</code></pre>

<p>  end
```</p>

<ul>
<li>测试通过！</li>
</ul>


<h2>确认用户故事，增加spec</h2>

<p>```rb</p>

<h1>coding: utf-8</h1>

<p>feature '用户希望公开帖子' do
  background do</p>

<pre><code>@user = User.create name: 'test_user'

@ruby_node = Node.create name: "Ruby"
Node.create name: "Rails"
</code></pre>

<p>.....
  scenario '输入节点、标题、内容，点击"保存"按钮，应该正常提交并显示帖子列表' do</p>

<pre><code>click_link "发布新帖"

select @ruby_node.name, from: 'topic_node_id'
fill_in 'topic_title', with: 'new topic title'
fill_in 'topic_content', with: 'new topic content'

click_button "保存"

current_path.should == root_path
page.should have_content 'new topic title'
</code></pre>

<p>  end
end
```</p>

<ul>
<li>测试失败：<code>No route matches [POST] "/topics"</code></li>
<li>原因：没有<code>topics#create</code>的路由信息</li>
</ul>


<h3>编辑<code>config/routes.rb</code>，增加路由信息</h3>

<p><code>rb
  resources :topics, only: [:index, :show, :new, :create]
</code></p>

<ul>
<li>测试失败：<code>The action 'create' could not be found for TopicsController</code></li>
<li>原因：没有定义<code>create</code>方法</li>
</ul>


<h3>编辑<code>controllers/topics_controller.rb</code></h3>

<p><code>rb
  def create
  end
</code></p>

<ul>
<li>测试失败：<code>Missing template topics/create, application/create with {:loca...</code></li>
<li>原因：没有<code>create</code>模板。</li>
</ul>


<h3>编辑<code>controllers/topics_controller.rb</code></h3>

<p>```rb
  def create</p>

<pre><code>Topic.create(params[:topic])
redirect_to root_path
</code></pre>

<p>  end
```</p>

<ul>
<li>测试失败：<code>Can't mass-assign protected attributes: node_id</code></li>
<li>原因：没有对<code>node_id</code>的访问属性声明</li>
</ul>


<h3>编辑<code>model/topic.rb</code>，增加属性声明</h3>

<p><code>rb
  attr_accessible :title, :node, :content, :node_id
</code></p>

<ul>
<li>测试通过！！</li>
</ul>


<h2>重构</h2>

<p>spec文件中，<code>click_link "发布新帖"</code>可以移到<code>before</code>里面</p>

<p>```rb
  before do</p>

<pre><code>visit '/sign_in'

fill_in 'user_name', with: @user.name
click_button "登录"

click_link "发布新帖"
</code></pre>

<p>  end</p>

<p>  scenario '访问/topics/new，应该显示新建帖子页面' do</p>

<pre><code>page.should have_content "新建帖子"
page.should have_select "topic_node_id", options: Node.all.map { |node| node.name }
page.should have_field 'topic_title'
page.should have_field 'topic_content'
</code></pre>

<p>  end</p>

<p>  scenario '输入节点、标题、内容，点击"保存"按钮，应该正常提交并显示帖子列表' do</p>

<pre><code>select @ruby_node.name, from: 'topic_node_id'
fill_in 'topic_title', with: 'new topic title'
fill_in 'topic_content', with: 'new topic content'

click_button "保存"

current_path.should == root_path
page.should have_content 'new topic title'
</code></pre>

<p>  end
```</p>

<ul>
<li>测试应该仍然全部通过</li>
</ul>


<h2>确认用户故事，修改spec</h2>

<h3>编辑<code>spec/features/topics_spec.rb</code>，增加帖子创建者的验证部分</h3>

<ul>
<li>第二行的feature描述错了，也顺便修改一下 :)</li>
<li>顺便把重复的部分重构一下 :)</li>
</ul>


<p>```rb</p>

<h1>coding: utf-8</h1>

<p>feature '访问者希望看到所有帖子' do
  background do</p>

<pre><code>node = Node.create name: "瞎扯淡"
@user = User.create name: 'test_user'

Topic.create title: "DHH 的公开课", node: node
Topic.create title: "Rails3 中 compass 的 IE 使用问题", node: node
Topic.create title: "这周二上海搞Ruby Tuesday么？", node: node
</code></pre>

<p>  end</p>

<p>  context "访问/topics" do</p>

<pre><code>before do
  visit '/topics'
end

scenario '应该显示所有帖子' do
  Topic.all.each { |topic| page.should have_content topic.title }

  page.should have_content "published less than a minute ago"
end

scenario '应该显示帖子的节点名称' do
  Topic.all.each { |topic| page.should have_content topic.node.name } 
end

scenario '应该显示帖子创建者名称' do
  page.should have_content @user.name
end
</code></pre>

<p>  end
end
```</p>

<ul>
<li>测试失败：<code>expected there to be text "test_user" in "社区 会员...</code></li>
<li>原因：还没有显示创建者名称</li>
</ul>


<h3>编辑<code>topics/_topics.html.haml</code></h3>

<p>修改第12行</p>

<p>```rb</p>

<pre><code>      = link_to "knwang", nil, class: "user_link"
</code></pre>

<p>```</p>

<p>为</p>

<p>```rb</p>

<pre><code>      = link_to topic.author.name, topic.author, class: "user_link"
</code></pre>

<p>```</p>

<ul>
<li>测试失败：`undefined methodanthor' for #Topic:0x007fd32d943a60``</li>
<li>原因：没有定义<code>author</code>方法</li>
</ul>


<h3>编辑<code>models/topic.rb</code>，增加<code>author</code>的声明</h3>

<p><code>rb
  belongs_to :anthor, class_name: "User"
</code></p>

<h3>在<code>rails console</code>中执行</h3>

<p>```rb
[20] pry(main)> generate "migration AddAuthorIdToTopics author_id:integer"</p>

<pre><code>  invoke  active_record
  create    db/migrate/20130102235735_add_author_id_to_topics.rb
</code></pre>

<p>=> "Completed"
[21] pry(main)>
```</p>

<h3>执行数据库升级</h3>

<p><code>bash
bundle exec rake db:migrate
bundle exec rake db:test:prepare
</code></p>

<h3>编辑<code>spec</code>，修改<code>Topic</code>，增加<code>author</code>的赋值部分</h3>

<p>```rb</p>

<pre><code>Topic.create title: "DHH 的公开课", node: node, author: @user
Topic.create title: "Rails3 中 compass 的 IE 使用问题", node: node, author: @user
Topic.create title: "这周二上海搞Ruby Tuesday么？", node: node, author: @user
</code></pre>

<p>```</p>

<ul>
<li>测试失败：<code>Can't mass-assign protected attributes: author</code></li>
<li>原因：没有设置<code>author</code>的访问属性</li>
</ul>


<h3>编辑<code>models/topic.rb</code>，增加访问属性声明</h3>

<p><code>rb
  attr_accessible :title, :node, :content, :node_id, :author
</code></p>

<ul>
<li>部分测试成功，但有其他的测试失败</li>
</ul>


<h4>编辑<code>spec/features/user_can_publish_topic_spec.rb</code></h4>

<ul>
<li>测试失败原因：公开帖子的时候没有设置<code>author</code></li>
</ul>


<p>```rb
  def create</p>

<pre><code>topic = Topic.new params[:topic]
topic.author = current_user
topic.save

redirect_to root_path
</code></pre>

<p>  end
```</p>

<ul>
<li>测试成功</li>
</ul>


<h4>编辑<code>spec/features/nodes_spec.rb</code></h4>

<ul>
<li>测试失败原因：数据准备部分没有设置<code>author</code></li>
</ul>


<p>```rb
  background do</p>

<pre><code>user = User.create name: 'test_user'

@node1 = Node.create name: "Ruby Node", description: "Ruby是一门优美的语言"
@node2 = Node.create name: "Rails Node", description: "Rails是一个快速WEB开发框架"

2.times.map.with_index { |i| Topic.create title: "topic #{i}", node: @node1, author: user}
3.times.map.with_index { |i| Topic.create title: "topic #{i + 10}", node: @node2, author: user}
</code></pre>

<p>  end
```</p>

<ul>
<li>测试通过！</li>
</ul>


<h2>再次确认用户故事，增加spec</h2>

<h3>编辑<code>spec/features/guest_can_see_user_info_spec.rb</code>，增加最新帖子的验证部分</h3>

<p>```rb</p>

<h1>coding: utf-8</h1>

<p>feature '访问者希望看到用户的信息' do
  background do</p>

<pre><code>@user = User.create name: "test_user"

5.times.map.with_index { |i| Topic.create title: "topic #{i}", author: @user }
</code></pre>

<p>  end</p>

<p>  scenario '访问/users/:id, 应该显示用户信息' do</p>

<pre><code>visit "/users/#{@user.id}"

page.should have_content @user.name
page.should have_content @user.created_at.to_s

Topic.all.each do |topic|
  page.should have_content topic.title
end
</code></pre>

<p>  end
end
```</p>

<ul>
<li>测试失败：<code>expected there to be text "topic 0" in "社区 会...</code></li>
<li>原因：还没有实现最新回复的部分</li>
</ul>


<h3>编辑<code>users/show.html.haml</code></h3>

<p>拷贝<code>ui/user.html.haml</code>中最新回复的部分至当前模板最下方</p>

<p>```rb
%section#user_recent_topics.box
  %section#user_recent_topics_banner.box.info-box</p>

<pre><code>%span 最近发布的帖子
</code></pre>

<p>  %section#user_recent_topics_content.box</p>

<pre><code>%ul
  %li
    = link_to "Rails", nil, class: "node"
    = link_to "BDD开发模式:使用Rspec开发Rails Project的标准流程是什么?"
    %span 3 days ago
  %li
    = link_to "Rails", nil, class: "node"
    = link_to "BDD开发模式:使用Rspec开发Rails Project的标准流程是什么?"
    %span 3 days ago
  %li
    = link_to "Rails", nil, class: "node"
    = link_to "BDD开发模式:使用Rspec开发Rails Project的标准流程是什么?"
    %span 3 days ago
</code></pre>

<p>```</p>

<p>修改为</p>

<p>```rb
%section#user_recent_topics.box
  %section#user_recent_topics_banner.box.info-box</p>

<pre><code>%span 最近发布的帖子
</code></pre>

<p>  %section#user_recent_topics_content.box</p>

<pre><code>%ul
  %li
    = link_to "Rails", nil, class: "node"
    = link_to "BDD开发模式:使用Rspec开发Rails Project的标准流程是什么?"
    %span 3 days ago
  %li
    = link_to "Rails", nil, class: "node"
    = link_to "BDD开发模式:使用Rspec开发Rails Project的标准流程是什么?"
    %span 3 days ago
  %li
    = link_to "Rails", nil, class: "node"
    = link_to "BDD开发模式:使用Rspec开发Rails Project的标准流程是什么?"
    %span 3 days ago
</code></pre>

<p>```</p>

<ul>
<li>测试失败：`undefined methodtopics' for #User:0x007fc0f7305830...``</li>
<li>原因：<code>user</code>还没有和<code>topic</code>关联</li>
</ul>


<h3>编辑<code>models/user.rb</code>，增加关联</h3>

<p><code>rb
  has_many :topics, :class_name =&gt; "Topic", :foreign_key =&gt; "author_id"
</code></p>

<ul>
<li>测试通过！</li>
</ul>


<h2>重构</h2>

<h3>编辑 <code>spec/featurs/guest_can_see_user_info_spec.rb</code></h3>

<ul>
<li>最新发布帖子的验证部分分到单独的<code>scenario</code></li>
<li>把重复的部分提取到<code>before</code></li>
</ul>


<p>```rb</p>

<h1>coding: utf-8</h1>

<p>feature '访问者希望看到用户的信息' do
  background do</p>

<pre><code>@user = User.create name: "test_user"
node = Node.create name: "ruby"

5.times.map.with_index { |i| Topic.create title: "topic #{i}", node: node, author: @user }
</code></pre>

<p>  end</p>

<p>  before do</p>

<pre><code>visit "/users/#{@user.id}"
</code></pre>

<p>  end</p>

<p>  scenario '应该显示用户信息' do</p>

<pre><code>page.should have_content @user.name
page.should have_content @user.created_at.to_s
</code></pre>

<p>  end</p>

<p>  scenario '应该显示用户最新发布的帖子' do</p>

<pre><code>Topic.all.each do |topic|
  page.should have_content topic.title
end
</code></pre>

<p>  end
end
```</p>

<h2>补充重构（可以不做）</h2>

<h3><code>guest_can_sign_in_spec.rb</code>中也有重复的代码可以重构</h3>

<p>```rb
  scenario '输入用户名后点击"登录"按钮，应该正常登录' do</p>

<pre><code>visit "/sign_in"

fill_in "user_name", with: @user.name
click_button "登录"

current_path.should == root_path
</code></pre>

<p>  end</p>

<p>  scenario '应该显示用户名称' do</p>

<pre><code>visit "/sign_in"

fill_in "user_name", with: @user.name
click_button "登录"

page.should have_content @user.name    
</code></pre>

<p>  end
```</p>

<p>可以把重复的部分提取出来</p>

<p>```rb
  before do</p>

<pre><code>visit "/sign_in"

fill_in "user_name", with: @user.name
click_button "登录"
</code></pre>

<p>  end</p>

<p>  scenario '输入用户名后点击"登录"按钮，应该正常登录' do</p>

<pre><code>current_path.should == root_path
</code></pre>

<p>  end</p>

<p>  scenario '应该显示用户名称' do</p>

<pre><code>page.should have_content @user.name    
</code></pre>

<p>  end
end
```</p>

<h2>完成，提交代码</h2>

<p><code>bash
git add .
git commit
git checkout dev
git merge f8 --no-ff
git branch -d f8
</code></p>

<p>下一步骤：<a href="/blog/2013/01/06/ruby-china-clone-9">使用 RSpec+Capybara 简单BDD入门 -9</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 RSpec+Capybara 简单BDD入门 -7]]></title>
    <link href="http://blueplanet.github.com/blog/2013/01/06/ruby-china-clone-7/"/>
    <updated>2013-01-06T20:59:00+09:00</updated>
    <id>http://blueplanet.github.com/blog/2013/01/06/ruby-china-clone-7</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013/01/06/ruby-china-clone-cover">目录</a>
上一步：<a href="/blog/2013/01/06/ruby-china-clone-6">使用 RSpec+Capybara 简单BDD入门 -6</a></p>

<h2>用户故事</h2>

<p>访问者希望登录</p>

<ul>
<li>使用用户名登录</li>
<li>登录后显示帖子列表</li>
<li>在右上角显示用户名</li>
</ul>


<h2>环境准备</h2>

<p><code>bash
git checkout -b f7
rails c # console
rails s # server
</code></p>

<h2>步骤</h2>

<h3>新建文件<code>spec/features/guest_can_sign_in_spec.rb</code></h3>

<p>```rb</p>

<h1>coding: utf-8</h1>

<p>feature '访问者希望登录' do
  background do</p>

<pre><code>@user = User.create name: "test_user", email: "test@test.com"
</code></pre>

<p>  end</p>

<p>  scenario '输入用户名后点击"登录"按钮，应该正常登录' do</p>

<pre><code>visit "/sign_in"

fill_in "user_name", with: @user.name
click_button "登录"

current_path.should == root_path
</code></pre>

<p>  end
end
```</p>

<ul>
<li>测试失败：<code>No route matches [GET] "/sign_in"</code></li>
<li>原因：没有<code>sign_in</code>的路由信息</li>
</ul>


<h3>编辑<code>config/routes.rb</code>，增加路由信息</h3>

<p><code>rb
  match 'sign_in', to: "sessions#new"
</code></p>

<ul>
<li>测试失败：<code>uninitialized constant SessionsController</code></li>
<li>原因：没有<code>sessions</code>这个<code>controller</code></li>
</ul>


<h3>在<code>rails console</code>中执行</h3>

<p>```rb
[10] pry(main)> generate "controller sessions"</p>

<pre><code>  create  app/controllers/sessions_controller.rb
  invoke  haml
  create    app/views/sessions
</code></pre>

<p>=> "Completed"
[11] pry(main)>
```</p>

<ul>
<li>测试失败：<code>The action 'new' could not be found for SessionsController</code></li>
<li>原因：没有定义<code>new</code>方法</li>
</ul>


<h3>编辑<code>controllers/sessions_controller.rb</code>，增加<code>new</code>方法</h3>

<p><code>rb
class SessionsController &lt; ApplicationController
  def new
  end
end
</code></p>

<ul>
<li>测试失败：<code>Missing template sessions/new, application/new with {:lo...</code></li>
<li>原因：没有对应的<code>new</code>模板</li>
</ul>


<h3>新建<code>sessions/new.html.haml</code>模板</h3>

<p>拷贝<code>ui/signin.html</code>内容至当前模板</p>

<p>```rb
= render 'shared/breadcrumb', links: [["Home", ""]]</p>

<p>%section#sign_in.box
  %h1 登录
  %form(action="" method="post" class="form-horizontal")</p>

<pre><code>.control-group
  %label(class="control-label") 用户名
  .controls
    %input(type="text")
.submit-button
  %input(type="submit" value="登录" class="btn btn-primary")
</code></pre>

<p>%section#sidebar
  %section#has_account.box</p>

<pre><code>%h2 还没有帐号?
= link_to "注册"
</code></pre>

<p>```</p>

<ul>
<li>测试失败：<code>Unable to find field "user_name"</code></li>
<li>原因：模板还是写死的假数据</li>
</ul>


<h3>修改<code>sessions/new.html.haml</code>模板</h3>

<p>```rb
= render 'shared/breadcrumb', links: [["Home", ""]]</p>

<p>%section#sign_in.box
  %h1 登录
  = form_tag sessions_path, method: :post, class: "form-horizontal" do</p>

<pre><code>.control-group
  = label_tag :user_name, "用户名", class: "control-label"
  .controls
    = text_field_tag :user_name
.submit-button
  = submit_tag "登录", class: "btn btn-primary"
</code></pre>

<p>%section#sidebar
  %section#has_account.box</p>

<pre><code>%h2 还没有帐号?
= link_to "注册"
</code></pre>

<p>```</p>

<ul>
<li>测试失败：`undefined local variable or methodsessions_path' for #&lt;...``</li>
<li>原因：没有<code>sessions#create</code>的路由信息</li>
</ul>


<h3>编辑<code>config/routes.rb</code>，增加路由信息</h3>

<p><code>rb
  resources :sessions, only: [:create]
</code></p>

<ul>
<li>测试失败：<code>The action 'create' could not be found for SessionsController</code></li>
<li>原因：没有定义<code>create</code>方法</li>
</ul>


<h3>编辑<code>controllers/sessions_controller</code>，增加<code>create</code>方法</h3>

<p><code>rb
  def create
  end
</code></p>

<ul>
<li>测试失败：<code>Missing template sessions/create, application/create with {:l...</code></li>
<li>原因：没有<code>sessions/create</code>模板</li>
</ul>


<h3>编辑<code>controllers/sessions_controller</code>，修改<code>create</code>方法内容</h3>

<p>```rb
  def create</p>

<pre><code>session[:user_name] = params[:user_name]
redirect_to root_path
</code></pre>

<p>  end
```</p>

<ul>
<li>测试通过！</li>
</ul>


<h2>确认用户故事，增加spec</h2>

<h3>编辑<code>spec/features/guest_can_sign_in_spec.rb</code></h3>

<p>```rb
  scenario '应该显示用户名称' do</p>

<pre><code>visit "/sign_in"

fill_in "user_name", with: @user.name
click_button "登录"

page.should have_content @user.name    
</code></pre>

<p>  end
```</p>

<ul>
<li>测试失败：<code>expected there to be text "test_user" in "社区 会员 knowa...</code></li>
<li>原因：还没有写显示用户名称的代码</li>
</ul>


<h3>编辑<code>layouts/application.html.haml</code></h3>

<p>把第22行knowang的部分修改为实际代码</p>

<p>```rb</p>

<pre><code>        = current_user.name
</code></pre>

<p>```</p>

<ul>
<li>测试失败：`undefined local variable or methodcurrent_user' for #&lt;...``</li>
<li>原因：没有定义<code>current_user</code>方法</li>
</ul>


<h3>编辑<code>controllers/application_controller.rb</code>，增加<code>current_user</code>的定义</h3>

<p>```rb
class ApplicationController &lt; ActionController::Base
  protect_from_forgery</p>

<p>  helper_method :current_user</p>

<p>  private
  def current_user</p>

<pre><code>user = User.new
user = User.find_by_name(session[:user_name]) if session[:user_name]
user
</code></pre>

<p>  end
end
```</p>

<ul>
<li>测试通过！</li>
</ul>


<h2>完成，提交代码</h2>

<p><code>bash
git add .
git commit
git checkout dev
git merge f7 --no-ff
git branch -d f7
</code></p>

<p>下一步骤：<a href="/blog/2013/01/06/ruby-china-clone-8">使用 RSpec+Capybara 简单BDD入门 -8</a></p>
]]></content>
  </entry>
  
</feed>

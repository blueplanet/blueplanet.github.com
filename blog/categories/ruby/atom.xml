<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | 蒼い惑星の記録]]></title>
  <link href="http://blueplanet.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blueplanet.github.com/"/>
  <updated>2013-01-06T17:29:36+09:00</updated>
  <id>http://blueplanet.github.com/</id>
  <author>
    <name><![CDATA[blueplanet]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby-Chinaのオンラインライブコーディングイベントに参加した]]></title>
    <link href="http://blueplanet.github.com/blog/2012/10/12/ruby-china-live-coding-by-knwang/"/>
    <updated>2012-10-12T21:24:00+09:00</updated>
    <id>http://blueplanet.github.com/blog/2012/10/12/ruby-china-live-coding-by-knwang</id>
    <content type="html"><![CDATA[<h2>きっかけ</h2>

<p><a href="http://ruby-china.org/">Ruby-China</a> は Ruby / Rails を勉強している中で、最近よくアクセスしているサイトの１つ。</p>

<p> 5日前に、 @knwang さんが、</p>

<blockquote><p><a href="http://ruby-china.org/">Ruby-China</a> に参加してから2ヶ月間経ちましたが、
やはり コミュニティにはどこから入門出来るかも分からない Rails の初心者が多いことに気付いました。
なので、10/11(木) 21:00 ~ 23:00 (北京時間)2時間で、オンラインのライブコーディングで
ゼロから簡単なアプリを作成するデモをやります。参加したい方はメアドを追記してください。</p></blockquote>

<p>という内容で投稿しました。</p>

<h2><a href="http://twitter.com/knwang">@knwang</a> さんは？</h2>

<p><a href="http://ruby-china.org/">Ruby-China</a> でたまたま目に見え、Rails のオンラインコース <a href="http://www.railstutors.com/#.UHgQy4VsKo8.twitter">Rails Tutors, Ruby on Rails online Courses</a> で起業しているようです。</p>

<!-- more -->


<h2>ライブコーディング</h2>

<h3>総評</h3>

<p>すごく良かった！！！参加の全員も、「今後もっとやりましょう！！」と盛り上がった</p>

<h3>良かったところ</h3>

<ul>
<li><a href="http://join.me/">join me</a> を利用して、スクリーンと音声を共有する形でした。このサービスはすごく良くて、100人以上の人を参加しているにもかかわらず、スクリーンと音声はほぼ完璧でした</li>
<li><a href="http://twitter.com/knwang">@knwang</a> のスキルは高すぎ！！！</li>
<li>そもそもの目的は、細かいソースの書き方ではなく、あるサービスを作ろうとする時、実際の考え方・実装の順番を示すことでした。実は、BDD の実践でした。要するに、テーブル構造とか、モデル関連とか、コントローラがいくつ必要だとか、全部じっくり考えてから実装するのではなく、<code>ユーザストリー -&gt; ビュー -&gt; コントローラ -&gt; モデル</code> という流れです。</li>
<li>2時間の制限があるため、実際はUIとテストをやってなかったんですが、全体の流れは見えせてもらって、一層よく理解できたという感じで、すごく刺激でした</li>
</ul>


<h3>ちょっと残念なところ</h3>

<ul>
<li>参加者は200人を超え、300近大勢いましたが、サービスの上限は250人で、40～50人しか利用した実績がなかった為、デモの品質を守りながら、順次に追記順番に従って参加者に案内する形でした。最後までも参加出来なかった方もいました</li>
<li>参加者はほぼ全員は、<a href="http://join.me">join me</a> を使った事がなかった為、使い方が分からないせいで、声を聞こえなかった方はいました</li>
<li>Webで参加すると声が聞こえないという事は、事前の案内メールでお知らせしてくれましたが、メール内容をよく読んでなかった方が何人がいて、声を聞こえなかった</li>
</ul>


<h2>後書き</h2>

<ul>
<li><a href="http://twitter.com/knwang">@knwang</a> の凄さをわかった為、すぐ <a href="http://www.railstutors.com/#.UHgQy4VsKo8.twitter">Rails Tutors, Ruby on Rails online Courses</a> のコースを参加しようと思ったら、メインはアメリカ向けなので、授業は英語になっています。英語は全くできないため、諦めました。</li>
<li>ちょうどつい最近、<a href="http://www.amazon.co.jp/dp/4798121932/">The RSpec Book</a>を読んだばかりで、写経はまだやってないところで、実際に BDD をやって頂いて、すごく勉強になりました</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rspec 2.9.0 on Rails 3.2.2 + sporkで試す]]></title>
    <link href="http://blueplanet.github.com/blog/2012/03/31/rspec-rails/"/>
    <updated>2012-03-31T23:21:00+09:00</updated>
    <id>http://blueplanet.github.com/blog/2012/03/31/rspec-rails</id>
    <content type="html"><![CDATA[<p>バージョンが異なる場合は、いろいろ違いがあるので、最新バージョンで環境を作って、最新のAPIを確認したい</p>

<h3>バージョン</h3>

<ul>
<li>ruby 1.9.2</li>
<li>rails 3.2.2</li>
<li>rspec 2.9.0</li>
<li>spork 0.9.0</li>
</ul>


<h2>手順</h2>

<ul>
<li>Gemfileに追加

<ul>
<li><code>gem 'rspec-rails'</code></li>
<li><code>gem 'spork'</code></li>
</ul>
</li>
<li><code>bundle install</code>を実行してgemインストール</li>
<li><code>rails g rspec:install</code>でrspec関連ファイルを生成</li>
<li><code>spork --bootstrap</code>でspork関連ファイルを生成</li>
<li><p><code>rails g scaffold post title:string body:text</code>を実行すると、ファイルがいっぱい生成される</p>

<ul>
<li>この中に<code>spec/view/</code>配下のファイルを参考してViewテストの書き方を勉強したい</li>
</ul>
</li>
<li><p>ハマったこと</p>

<ul>
<li><code>Gemfile</code>に追加する時、<code>gorup</code>を使いたかったが、<code>:development, :test</code>で限定すると、何か<code>rails g scaffold …</code>で生成する時、spec関連のテストクラスは作ってくれない</li>
<li>やはり<code>Gemfile</code>の書き方はよくわかってないせい。とりあえずは、直接に<code>group</code>は書かない</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec on Rails (4)]]></title>
    <link href="http://blueplanet.github.com/blog/2012/03/28/rspec-rails/"/>
    <updated>2012-03-28T22:28:00+09:00</updated>
    <id>http://blueplanet.github.com/blog/2012/03/28/rspec-rails</id>
    <content type="html"><![CDATA[<p>　<a href="http://jp.rubyist.net/magazine/?0023-Rspec">スはスペックのス 【第 2 回】 RSpec on Rails (コントローラとビュー編)</a>記事の写経</p>

<ul>
<li>Test::UnitはModelのテストをユニットテストとし、Controllerのテストを機能テストとしていますが、RSpecのほうは、Model・Controller・View・Helperのテストはすべてユニットテストとみなす</li>
<li><p>ハマったこと</p>

<ul>
<li><code>render_template("blogs")</code>を書くと、レッドのはずだが、自分の環境では普通にグリーンになってる</li>
<li>試してみたが、<code>blogs</code>と<code>blogs/show</code>と<code>show</code>と３つが全部OK。原因は分からず</li>
</ul>
</li>
<li><p>調べたい</p>

<ul>
<li>FactoryGril</li>
<li>Spoke</li>
<li>浜松Rails3は資料いろいろ有りそう</li>
</ul>
</li>
</ul>


<p>　今日は、Controllerのテストまでに終わった。Viewのテストは次回で</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec on Rails (4)]]></title>
    <link href="http://blueplanet.github.com/blog/2012/03/25/rspec-rails/"/>
    <updated>2012-03-25T09:08:00+09:00</updated>
    <id>http://blueplanet.github.com/blog/2012/03/25/rspec-rails</id>
    <content type="html"><![CDATA[<p>　写経の記録</p>

<ul>
<li><p><code>before_save</code>メソッドを定義しても、呼び出されてないらしい。下記を参考して修正<br/>
<a href="http://d.hatena.ne.jp/NowTom/20110129/1296271461">RSpec2.4.0をRails3.0.3で学ぶ(その1)</a></p></li>
<li><p>疑問：テスト実行はちょっと遅い気がする。試しにTimeでトータル時間を測定してみたらこんな感じ
<img src="https://lh5.googleusercontent.com/-KSxPT5UHQCY/T25luPLyRYI/AAAAAAAAAg0/ZJtVEwaUEvw/s800/120325-0001.png" alt="image" />
userとsystemはどっちがどっちかはよく分からない。要するに、テストロジック自体は0.219かかったが、テストコマンドの全体は3.96かかったとは、間違いないと思いう。もちろん、Rails環境のロードも時間がかかるのはわかってるけど。</p></li>
</ul>


<p>　Rails環境を事前にロードしておく方法があるようなので、後で調べます</p>

<h2>　</h2>

<p>ブログの画像をPicasawebを使ってますが、毎回Safariでアップロードし、URLを取得して文書に貼り付けとの流れだけど、面倒なので、よりいい方法があるかを調べる</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec on Rails (3)]]></title>
    <link href="http://blueplanet.github.com/blog/2012/03/23/rspec-rails/"/>
    <updated>2012-03-23T22:36:00+09:00</updated>
    <id>http://blueplanet.github.com/blog/2012/03/23/rspec-rails</id>
    <content type="html"><![CDATA[<p>　RSpec on Railsｎの写経です。</p>

<p>　<code>lambda</code>と<code>change</code>マッチャは面白い、というか、まだよく理解出来てない</p>

<ul>
<li>値の変化を評価する場合使う</li>
<li>メソッドチェインなし：とにかく何かが変わった</li>
<li>by(value)：１個増えた</li>
<li>from(old).to(new)</li>
<li>to(new)</li>
<li><code>change</code>にブロックを渡す場合、<code>do .. end</code>はサポートされない</li>
</ul>


<p>成果物はこれ。</p>

<p><img src="https://lh4.googleusercontent.com/-j_NuxfNsDZY/T2yML-Z4QAI/AAAAAAAAAgc/z5iYAqnAL90/s800/120323-0001.png" alt="image" /></p>

<hr />

<h3>追記</h3>

<p>Viを使ってるので、Unite.vimの設定をちょっと見なおした。正直に言うと、今までは、Uniteはあんまり使ってなかった、すみません。どんどん写経すると、やはりバッファだけではなく、カレントフォルダのファイル一覧も欲しくなるので、修正しました。</p>

<p><code>noremap &lt;C-P&gt; :Unite buffer file&lt;CR&gt;</code></p>
]]></content>
  </entry>
  
</feed>

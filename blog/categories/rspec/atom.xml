<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RSpec | Welcome to my Blog]]></title>
  <link href="http://blueplanet.github.com/blog/categories/rspec/atom.xml" rel="self"/>
  <link href="http://blueplanet.github.com/"/>
  <updated>2012-09-21T23:41:14+09:00</updated>
  <id>http://blueplanet.github.com/</id>
  <author>
    <name><![CDATA[blueplanet]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[「改めて学ぶRSpec by Rubyist Magazine 0037号」を読んだ]]></title>
    <link href="http://blueplanet.github.com/blog/2012/04/24/rspec-re-study/"/>
    <updated>2012-04-24T00:00:00+09:00</updated>
    <id>http://blueplanet.github.com/blog/2012/04/24/rspec-re-study</id>
    <content type="html"><![CDATA[<p>RSpecを勉強したいと思って、調べてみたら、素晴らしい記事を見つけた。</p>

<p><a href="http://jp.rubyist.net/magazine/?0035-RSpecInPractice"> 改めて学ぶRSpec </a></p>

<h3>xUnitっぽいRSpecコードの特徴</h3>

<ul>
<li>テストメソッドはすべてフラットで定義される</li>
<li><code>it []</code>＝＝test○○メソッド</li>
<li><code>before</code>==<code>setup</code></li>
</ul>


<h3>RSpecの流儀</h3>

<ul>
<li><code>describe</code>はネストできるので、テストコードに構造が生まれるぞ！</li>
<li><code>context</code>は<code>describe</code>のエイリアスなんでが、<code>describe</code>==テスト対象、<code>context</code>＝＝テストする時の状況</li>
<li>メリット：段階的に仕様をテストコードに落とし込む</li>
</ul>


<p>{% highlight ruby %}
describe クラス do
  describe メソッド do</p>

<pre><code>context 正常値 do
  it {}
end

context 異常値 do
  it {}
end
</code></pre>

<p>  end
end
{% endhighlight ruby%}</p>

<p>的なイメージ</p>

<ul>
<li>subject

<ul>
<li>subjectを使うことで、<code>should</code>のレシーバを省略できる</li>
<li>メリット：テスト対象が明確になる、ほぼ強制的に一つのテストケースに一つのアサーション歯科かけなくなる</li>
<li><code>describe</code>のネストと被ってる場合は、新たに<code>describe</code>をネストさせてもう一度subjectを定義する</li>
</ul>
</li>
</ul>


<h3>itに文字列を渡すかどうか</h3>

<ul>
<li><code>it</code>に文字列を渡すと、コメントとコードの両方があるのは<code>DRY</code>ではないので、渡さないほうがいい</li>
<li>デメリット：<code>--fs</code>オプションで実行する時の出力は日本語にならなくので、読みづらくなる

<ul>
<li>解決：<code>context</code>にテスト内容を細かく書く</li>
<li>まあ、テスト結果が一番重要なので、実際はそこまでもやってない</li>
</ul>
</li>
</ul>


<h3>letでデータ以外のぶぶんだけを共通化</h3>

<ul>
<li>ブロックの評価値</li>
<li>値をシンボルと同名の変数に格納する</li>
<li>テストケース毎に結果がキャッシュされる</li>
</ul>


<p>これはまだ理解できてない気がする</p>

<h3>shared_context</h3>

<ul>
<li>メソッドの間に共通的なcontextがある場合がある</li>
<li><code>shared_context</code>と<code>include_context</code>で共通化できる</li>
</ul>


<hr />

<p>まだまだRubyもRSpecも初心者なので、分からないところが多いところ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[スはスペックのス　感想]]></title>
    <link href="http://blueplanet.github.com/blog/2012/04/21/s-is-for-spec/"/>
    <updated>2012-04-21T00:00:00+09:00</updated>
    <id>http://blueplanet.github.com/blog/2012/04/21/s-is-for-spec</id>
    <content type="html"><![CDATA[<p>角谷さんの「スはスペックのス」という四年前のビデオを見た感想。</p>

<p>既に何回見たけど、毎回も刺激を受けてしまったんですね。最初は実演だけをみて、すごいなと思って、また前のプレゼン部分を見ました。</p>

<h2>TDD</h2>

<ul>
<li>TDDは設計方法・開発の進め方である

<ul>
<li>テスト技法だと思った、誤解だったね。</li>
</ul>
</li>
<li>Red / Green / Refactoring ３つのモードが重要

<ul>
<li>別のTDD資料を読んだ時は、この３つのモードはしっかり認識してなかった</li>
<li>三角の図もすごく理解しやすいですね。すぐ覚えました</li>
<li>今どのモードにいるのはしっかり認識しよう</li>
<li>その上、当該モードのタスク以外はやらないこと

<ul>
<li>例え、Redモードの場合は、リファクタリングするのはダメ</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>Emacs</h2>

<p>まあ、本題ではないけど、Emacsはカッコイイですね。このきっかけでEmacsを使い始めたよ！</p>

<p>後でYasnipetを導入してみたい</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[スはスペックのスの写経]]></title>
    <link href="http://blueplanet.github.com/blog/2012/04/15/bowling-with-rspec/"/>
    <updated>2012-04-15T00:00:00+09:00</updated>
    <id>http://blueplanet.github.com/blog/2012/04/15/bowling-with-rspec</id>
    <content type="html"><![CDATA[<p>４年前のビデオですが、すごく刺激を受けたので、いろいろ調べて、自分の環境でEmacsとRSpecの環境を揃えた。</p>

<p>そろそろ実演をみながら、写経する</p>

<ul>
<li>目的・ゴールドを明確に限定する</li>
<li>最初は、一番簡単に動くのを考えるので、全部ガターケースにする</li>
<li>２番目はすべて1ピンのケースを追加

<ul>
<li>通った</li>
</ul>
</li>
<li>３番目のケースはストライクのケースを追加したい

<ul>
<li>仕様が変わって、何かを追加したいが、設計がおかしいところを発見
　とりあえず追加する仕様を置いておいて、先に設計を見直す</li>
</ul>
</li>
</ul>


<hr />

<p>４０分ぐらいかかったのですが、ビデオを時間は１６：３０までです。</p>

<p>角谷さんのお話しの言葉が分からない時も調べない行けないし、自分のコーディングスピードもそれほど速くないし、確かに時間がかかりますね。</p>

<p>とりあえずは半分で、残りは明日(かな)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「浜松Rails3道場　其の壱　プロジェクト作成〜Rouging編」の写経(1)]]></title>
    <link href="http://blueplanet.github.com/blog/2012/04/03/rails3dojo/"/>
    <updated>2012-04-03T07:30:00+09:00</updated>
    <id>http://blueplanet.github.com/blog/2012/04/03/rails3dojo</id>
    <content type="html"><![CDATA[<p><a href="http://www.slideshare.net/mackato/rails3dojo-routing">浜松Rails3道場　其の壱　プロジェクト作成〜Rouging編</a></p>

<ul>
<li><code>Ruby 1.9.2 @ Rails3.0.7</code>環境作成</li>
<li><code>pow</code>導入

<ul>
<li><code>curl get.pow.cx | sh</code>一発でOK</li>
<li><code>ln -s rails3dojo</code>で追加</li>
<li><code>open rails3dojo.dev</code>で確認できる！素晴らしい！</li>
</ul>
</li>
<li><code>spork</code>導入

<ul>
<li><code>config/environments/test.rb</code>の<code>config.cache_classes</code>を<code>false</code>に変更</li>
</ul>
</li>
<li>写経内容は割愛

<ul>
<li>スライドだけでは、ちょっと何かが足りないなーと感じた。</li>
<li><code>config/route.rb</code>修正した場合、sporkも再起動する必要があるらしい</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rspec 2.9.0 on Rails 3.2.2 + sporkで試す]]></title>
    <link href="http://blueplanet.github.com/blog/2012/03/31/rspec-rails/"/>
    <updated>2012-03-31T23:21:00+09:00</updated>
    <id>http://blueplanet.github.com/blog/2012/03/31/rspec-rails</id>
    <content type="html"><![CDATA[<p>バージョンが異なる場合は、いろいろ違いがあるので、最新バージョンで環境を作って、最新のAPIを確認したい</p>

<h3>バージョン</h3>

<ul>
<li>ruby 1.9.2</li>
<li>rails 3.2.2</li>
<li>rspec 2.9.0</li>
<li>spork 0.9.0</li>
</ul>


<h2>手順</h2>

<ul>
<li>Gemfileに追加

<ul>
<li><code>gem 'rspec-rails'</code></li>
<li><code>gem 'spork'</code></li>
</ul>
</li>
<li><code>bundle install</code>を実行してgemインストール</li>
<li><code>rails g rspec:install</code>でrspec関連ファイルを生成</li>
<li><code>spork --bootstrap</code>でspork関連ファイルを生成</li>
<li><p><code>rails g scaffold post title:string body:text</code>を実行すると、ファイルがいっぱい生成される</p>

<ul>
<li>この中に<code>spec/view/</code>配下のファイルを参考してViewテストの書き方を勉強したい</li>
</ul>
</li>
<li><p>ハマったこと</p>

<ul>
<li><code>Gemfile</code>に追加する時、<code>gorup</code>を使いたかったが、<code>:development, :test</code>で限定すると、何か<code>rails g scaffold …</code>で生成する時、spec関連のテストクラスは作ってくれない</li>
<li>やはり<code>Gemfile</code>の書き方はよくわかってないせい。とりあえずは、直接に<code>group</code>は書かない</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
